{"version":3,"file":"component---src-pages-about-jshead.js","mappings":"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","sources":["webpack://resume-22-front/./node_modules/camelcase/index.js","webpack://resume-22-front/../src/image-utils.ts","webpack://resume-22-front/../src/components/hooks.ts","webpack://resume-22-front/../src/components/picture.tsx","webpack://resume-22-front/../src/components/placeholder.tsx","webpack://resume-22-front/../src/components/main-image.tsx","webpack://resume-22-front/../src/components/layout-wrapper.tsx","webpack://resume-22-front/../src/components/gatsby-image.server.tsx","webpack://resume-22-front/../src/components/static-image.server.tsx","webpack://resume-22-front/./src/pages/about.js"],"sourcesContent":["'use strict';\n\nconst preserveCamelCase = string => {\n\tlet isLastCharLower = false;\n\tlet isLastCharUpper = false;\n\tlet isLastLastCharUpper = false;\n\n\tfor (let i = 0; i < string.length; i++) {\n\t\tconst character = string[i];\n\n\t\tif (isLastCharLower && /[a-zA-Z]/.test(character) && character.toUpperCase() === character) {\n\t\t\tstring = string.slice(0, i) + '-' + string.slice(i);\n\t\t\tisLastCharLower = false;\n\t\t\tisLastLastCharUpper = isLastCharUpper;\n\t\t\tisLastCharUpper = true;\n\t\t\ti++;\n\t\t} else if (isLastCharUpper && isLastLastCharUpper && /[a-zA-Z]/.test(character) && character.toLowerCase() === character) {\n\t\t\tstring = string.slice(0, i - 1) + '-' + string.slice(i - 1);\n\t\t\tisLastLastCharUpper = isLastCharUpper;\n\t\t\tisLastCharUpper = false;\n\t\t\tisLastCharLower = true;\n\t\t} else {\n\t\t\tisLastCharLower = character.toLowerCase() === character && character.toUpperCase() !== character;\n\t\t\tisLastLastCharUpper = isLastCharUpper;\n\t\t\tisLastCharUpper = character.toUpperCase() === character && character.toLowerCase() !== character;\n\t\t}\n\t}\n\n\treturn string;\n};\n\nconst camelCase = (input, options) => {\n\tif (!(typeof input === 'string' || Array.isArray(input))) {\n\t\tthrow new TypeError('Expected the input to be `string | string[]`');\n\t}\n\n\toptions = Object.assign({\n\t\tpascalCase: false\n\t}, options);\n\n\tconst postProcess = x => options.pascalCase ? x.charAt(0).toUpperCase() + x.slice(1) : x;\n\n\tif (Array.isArray(input)) {\n\t\tinput = input.map(x => x.trim())\n\t\t\t.filter(x => x.length)\n\t\t\t.join('-');\n\t} else {\n\t\tinput = input.trim();\n\t}\n\n\tif (input.length === 0) {\n\t\treturn '';\n\t}\n\n\tif (input.length === 1) {\n\t\treturn options.pascalCase ? input.toUpperCase() : input.toLowerCase();\n\t}\n\n\tconst hasUpperCase = input !== input.toLowerCase();\n\n\tif (hasUpperCase) {\n\t\tinput = preserveCamelCase(input);\n\t}\n\n\tinput = input\n\t\t.replace(/^[_.\\- ]+/, '')\n\t\t.toLowerCase()\n\t\t.replace(/[_.\\- ]+(\\w|$)/g, (_, p1) => p1.toUpperCase())\n\t\t.replace(/\\d+(\\w|$)/g, m => m.toUpperCase());\n\n\treturn postProcess(input);\n};\n\nmodule.exports = camelCase;\n// TODO: Remove this for the next major release\nmodule.exports.default = camelCase;\n","import camelCase from \"camelcase\"\nimport type { IGatsbyImageData } from \"./index\"\n\nconst DEFAULT_PIXEL_DENSITIES = [0.25, 0.5, 1, 2]\nexport const DEFAULT_BREAKPOINTS = [750, 1080, 1366, 1920]\nexport const EVERY_BREAKPOINT = [\n  320, 654, 768, 1024, 1366, 1600, 1920, 2048, 2560, 3440, 3840, 4096,\n]\nconst DEFAULT_FLUID_WIDTH = 800\nconst DEFAULT_FIXED_WIDTH = 800\nconst DEFAULT_ASPECT_RATIO = 4 / 3\n\nexport type Fit = \"cover\" | \"fill\" | \"inside\" | \"outside\" | \"contain\"\n\nexport type Layout = \"fixed\" | \"fullWidth\" | \"constrained\"\nexport type ImageFormat = \"jpg\" | \"png\" | \"webp\" | \"avif\" | \"auto\" | \"\"\n\n/**\n * The minimal required reporter, as we don't want to import it from gatsby-cli\n */\nexport interface IReporter {\n  warn(message: string): void\n}\n\nexport interface ISharpGatsbyImageArgs {\n  layout?: Layout\n  formats?: Array<ImageFormat>\n  placeholder?: \"tracedSVG\" | \"dominantColor\" | \"blurred\" | \"none\"\n  tracedSVGOptions?: Record<string, unknown>\n  width?: number\n  height?: number\n  aspectRatio?: number\n  sizes?: string\n  quality?: number\n  transformOptions?: {\n    fit?: Fit\n    cropFocus?: number | string\n    duotone?: {\n      highlight: string\n      shadow: string\n      opacity?: number\n    }\n    grayscale?: boolean\n    rotate?: number\n    trim?: number\n  }\n  jpgOptions?: Record<string, unknown>\n  pngOptions?: Record<string, unknown>\n  webpOptions?: Record<string, unknown>\n  avifOptions?: Record<string, unknown>\n  blurredOptions?: { width?: number; toFormat?: ImageFormat }\n  breakpoints?: Array<number>\n  outputPixelDensities?: Array<number>\n  backgroundColor?: string\n}\n\nexport interface IImageSizeArgs {\n  width?: number\n  height?: number\n  layout?: Layout\n  filename: string\n  outputPixelDensities?: Array<number>\n  breakpoints?: Array<number>\n  fit?: Fit\n  reporter?: IReporter\n  sourceMetadata: { width: number; height: number }\n}\n\nexport interface IImageSizes {\n  sizes: Array<number>\n  presentationWidth: number\n  presentationHeight: number\n  aspectRatio: number\n  unscaledWidth: number\n}\n\nexport interface IImage {\n  src: string\n  width: number\n  height: number\n  format: ImageFormat\n}\n\nexport interface IGatsbyImageHelperArgs {\n  pluginName: string\n  generateImageSource: (\n    filename: string,\n    width: number,\n    height: number,\n    format: ImageFormat,\n    fit?: Fit,\n    options?: Record<string, unknown>\n  ) => IImage\n  layout?: Layout\n  formats?: Array<ImageFormat>\n  filename: string\n  placeholderURL?: string\n  width?: number\n  height?: number\n  sizes?: string\n  reporter?: IReporter\n  sourceMetadata?: { width: number; height: number; format: ImageFormat }\n  fit?: Fit\n  options?: Record<string, unknown>\n  breakpoints?: Array<number>\n  backgroundColor?: string\n  aspectRatio?: number\n}\n\nconst warn = (message: string): void => console.warn(message)\n\nconst sortNumeric = (a: number, b: number): number => a - b\n\nexport const getSizes = (width: number, layout: Layout): string | undefined => {\n  switch (layout) {\n    // If screen is wider than the max size, image width is the max size,\n    // otherwise it's the width of the screen\n    case `constrained`:\n      return `(min-width: ${width}px) ${width}px, 100vw`\n\n    // Image is always the same width, whatever the size of the screen\n    case `fixed`:\n      return `${width}px`\n\n    // Image is always the width of the screen\n    case `fullWidth`:\n      return `100vw`\n\n    default:\n      return undefined\n  }\n}\n\nexport const getSrcSet = (images: Array<IImage>): string =>\n  images.map(image => `${image.src} ${image.width}w`).join(`,\\n`)\n\nexport function formatFromFilename(filename: string): ImageFormat | undefined {\n  const dot = filename.lastIndexOf(`.`)\n  if (dot !== -1) {\n    const ext = filename.slice(dot + 1)\n    if (ext === `jpeg`) {\n      return `jpg`\n    }\n    if (ext.length === 3 || ext.length === 4) {\n      return ext as ImageFormat\n    }\n  }\n  return undefined\n}\n\nexport function setDefaultDimensions(\n  args: IGatsbyImageHelperArgs\n): IGatsbyImageHelperArgs {\n  let {\n    layout = `constrained`,\n    width,\n    height,\n    sourceMetadata,\n    breakpoints,\n    aspectRatio,\n    formats = [`auto`, `webp`],\n  } = args\n  formats = formats.map(format => format.toLowerCase() as ImageFormat)\n  layout = camelCase(layout) as Layout\n\n  if (width && height) {\n    return { ...args, formats, layout, aspectRatio: width / height }\n  }\n  if (sourceMetadata.width && sourceMetadata.height && !aspectRatio) {\n    aspectRatio = sourceMetadata.width / sourceMetadata.height\n  }\n\n  if (layout === `fullWidth`) {\n    width = width || sourceMetadata.width || breakpoints[breakpoints.length - 1]\n    height = height || Math.round(width / (aspectRatio || DEFAULT_ASPECT_RATIO))\n  } else {\n    if (!width) {\n      if (height && aspectRatio) {\n        width = height * aspectRatio\n      } else if (sourceMetadata.width) {\n        width = sourceMetadata.width\n      } else if (height) {\n        width = Math.round(height / DEFAULT_ASPECT_RATIO)\n      } else {\n        width = DEFAULT_FIXED_WIDTH\n      }\n    }\n\n    if (aspectRatio && !height) {\n      height = Math.round(width / aspectRatio)\n    } else if (!aspectRatio) {\n      aspectRatio = width / height\n    }\n  }\n  return { ...args, width, height, aspectRatio, layout, formats }\n}\n\n/**\n * Use this for getting an image for the blurred placeholder. This ensures the\n * aspect ratio and crop match the main image\n */\nexport function getLowResolutionImageURL(\n  args: IGatsbyImageHelperArgs,\n  width = 20\n): string {\n  args = setDefaultDimensions(args)\n  const { generateImageSource, filename, aspectRatio } = args\n  return generateImageSource(\n    filename,\n    width,\n    Math.round(width / aspectRatio),\n    args.sourceMetadata.format || `jpg`,\n    args.fit,\n    args.options\n  )?.src\n}\n\nexport function generateImageData(\n  args: IGatsbyImageHelperArgs\n): IGatsbyImageData {\n  args = setDefaultDimensions(args)\n\n  let {\n    pluginName,\n    sourceMetadata,\n    generateImageSource,\n    layout,\n    fit,\n    options,\n    width,\n    height,\n    filename,\n    reporter = { warn },\n    backgroundColor,\n    placeholderURL,\n  } = args\n\n  if (!pluginName) {\n    reporter.warn(\n      `[gatsby-plugin-image] \"generateImageData\" was not passed a plugin name`\n    )\n  }\n\n  if (typeof generateImageSource !== `function`) {\n    throw new Error(`generateImageSource must be a function`)\n  }\n\n  if (!sourceMetadata || (!sourceMetadata.width && !sourceMetadata.height)) {\n    // No metadata means we let the CDN handle max size etc, aspect ratio etc\n    sourceMetadata = {\n      width,\n      height,\n      format: sourceMetadata?.format || formatFromFilename(filename) || `auto`,\n    }\n  } else if (!sourceMetadata.format) {\n    sourceMetadata.format = formatFromFilename(filename)\n  }\n\n  const formats = new Set<ImageFormat>(args.formats)\n\n  if (formats.size === 0 || formats.has(`auto`) || formats.has(``)) {\n    formats.delete(`auto`)\n    formats.delete(``)\n    formats.add(sourceMetadata.format)\n  }\n\n  if (formats.has(`jpg`) && formats.has(`png`)) {\n    reporter.warn(\n      `[${pluginName}] Specifying both 'jpg' and 'png' formats is not supported. Using 'auto' instead`\n    )\n    if (sourceMetadata.format === `jpg`) {\n      formats.delete(`png`)\n    } else {\n      formats.delete(`jpg`)\n    }\n  }\n\n  const imageSizes = calculateImageSizes({ ...args, sourceMetadata })\n\n  const result: IGatsbyImageData[\"images\"] = {\n    sources: [],\n  }\n\n  let sizes = args.sizes\n  if (!sizes) {\n    sizes = getSizes(imageSizes.presentationWidth, layout)\n  }\n\n  formats.forEach(format => {\n    const images = imageSizes.sizes\n      .map(size => {\n        const imageSrc = generateImageSource(\n          filename,\n          size,\n          Math.round(size / imageSizes.aspectRatio),\n          format,\n          fit,\n          options\n        )\n        if (\n          !imageSrc?.width ||\n          !imageSrc.height ||\n          !imageSrc.src ||\n          !imageSrc.format\n        ) {\n          reporter.warn(\n            `[${pluginName}] The resolver for image ${filename} returned an invalid value.`\n          )\n          return undefined\n        }\n        return imageSrc\n      })\n      .filter(Boolean)\n\n    if (format === `jpg` || format === `png` || format === `auto`) {\n      const unscaled =\n        images.find(img => img.width === imageSizes.unscaledWidth) || images[0]\n\n      if (unscaled) {\n        result.fallback = {\n          src: unscaled.src,\n          srcSet: getSrcSet(images),\n          sizes,\n        }\n      }\n    } else {\n      result.sources?.push({\n        srcSet: getSrcSet(images),\n        sizes,\n        type: `image/${format}`,\n      })\n    }\n  })\n\n  const imageProps: Partial<IGatsbyImageData> = {\n    images: result,\n    layout,\n    backgroundColor,\n  }\n\n  if (placeholderURL) {\n    imageProps.placeholder = { fallback: placeholderURL }\n  }\n\n  switch (layout) {\n    case `fixed`:\n      imageProps.width = imageSizes.presentationWidth\n      imageProps.height = imageSizes.presentationHeight\n      break\n\n    case `fullWidth`:\n      imageProps.width = 1\n      imageProps.height = 1 / imageSizes.aspectRatio\n      break\n\n    case `constrained`:\n      imageProps.width = args.width || imageSizes.presentationWidth || 1\n      imageProps.height = (imageProps.width || 1) / imageSizes.aspectRatio\n  }\n\n  return imageProps as IGatsbyImageData\n}\n\nconst dedupeAndSortDensities = (values: Array<number>): Array<number> =>\n  Array.from(new Set([1, ...values])).sort(sortNumeric)\n\nexport function calculateImageSizes(args: IImageSizeArgs): IImageSizes {\n  const {\n    width,\n    height,\n    filename,\n    layout = `constrained`,\n    sourceMetadata: imgDimensions,\n    reporter = { warn },\n    breakpoints = DEFAULT_BREAKPOINTS,\n  } = args\n\n  // check that all dimensions provided are positive\n  const userDimensions = { width, height }\n  const erroneousUserDimensions = Object.entries(userDimensions).filter(\n    ([_, size]) => typeof size === `number` && size < 1\n  )\n  if (erroneousUserDimensions.length) {\n    throw new Error(\n      `Specified dimensions for images must be positive numbers (> 0). Problem dimensions you have are ${erroneousUserDimensions\n        .map(dim => dim.join(`: `))\n        .join(`, `)}`\n    )\n  }\n\n  if (layout === `fixed`) {\n    return fixedImageSizes(args)\n  } else if (layout === `constrained`) {\n    return responsiveImageSizes(args)\n  } else if (layout === `fullWidth`) {\n    return responsiveImageSizes({ breakpoints, ...args })\n  } else {\n    reporter.warn(\n      `No valid layout was provided for the image at ${filename}. Valid image layouts are fixed, fullWidth, and constrained. Found ${layout}`\n    )\n    return {\n      sizes: [imgDimensions.width],\n      presentationWidth: imgDimensions.width,\n      presentationHeight: imgDimensions.height,\n      aspectRatio: imgDimensions.width / imgDimensions.height,\n      unscaledWidth: imgDimensions.width,\n    }\n  }\n}\nexport function fixedImageSizes({\n  filename,\n  sourceMetadata: imgDimensions,\n  width,\n  height,\n  fit = `cover`,\n  outputPixelDensities = DEFAULT_PIXEL_DENSITIES,\n  reporter = { warn },\n}: IImageSizeArgs): IImageSizes {\n  let aspectRatio = imgDimensions.width / imgDimensions.height\n  // Sort, dedupe and ensure there's a 1\n  const densities = dedupeAndSortDensities(outputPixelDensities)\n\n  // If both are provided then we need to check the fit\n  if (width && height) {\n    const calculated = getDimensionsAndAspectRatio(imgDimensions, {\n      width,\n      height,\n      fit,\n    })\n    width = calculated.width\n    height = calculated.height\n    aspectRatio = calculated.aspectRatio\n  }\n\n  if (!width) {\n    if (!height) {\n      width = DEFAULT_FIXED_WIDTH\n    } else {\n      width = Math.round(height * aspectRatio)\n    }\n  } else if (!height) {\n    height = Math.round(width / aspectRatio)\n  }\n\n  const originalWidth = width // will use this for presentationWidth, don't want to lose it\n  const isTopSizeOverriden =\n    imgDimensions.width < width || imgDimensions.height < (height as number)\n\n  // If the image is smaller than requested, warn the user that it's being processed as such\n  // print out this message with the necessary information before we overwrite it for sizing\n  if (isTopSizeOverriden) {\n    const fixedDimension = imgDimensions.width < width ? `width` : `height`\n    reporter.warn(`\nThe requested ${fixedDimension} \"${\n      fixedDimension === `width` ? width : height\n    }px\" for the image ${filename} was larger than the actual image ${fixedDimension} of ${\n      imgDimensions[fixedDimension]\n    }px. If possible, replace the current image with a larger one.`)\n\n    if (fixedDimension === `width`) {\n      width = imgDimensions.width\n      height = Math.round(width / aspectRatio)\n    } else {\n      height = imgDimensions.height\n      width = height * aspectRatio\n    }\n  }\n\n  const sizes = densities\n    .filter(size => size >= 1) // remove smaller densities because fixed images don't need them\n    .map(density => Math.round(density * (width as number)))\n    .filter(size => size <= imgDimensions.width)\n\n  return {\n    sizes,\n    aspectRatio,\n    presentationWidth: originalWidth,\n    presentationHeight: Math.round(originalWidth / aspectRatio),\n    unscaledWidth: width,\n  }\n}\n\nexport function responsiveImageSizes({\n  sourceMetadata: imgDimensions,\n  width,\n  height,\n  fit = `cover`,\n  outputPixelDensities = DEFAULT_PIXEL_DENSITIES,\n  breakpoints,\n  layout,\n}: IImageSizeArgs): IImageSizes {\n  let sizes\n  let aspectRatio = imgDimensions.width / imgDimensions.height\n  // Sort, dedupe and ensure there's a 1\n  const densities = dedupeAndSortDensities(outputPixelDensities)\n\n  // If both are provided then we need to check the fit\n  if (width && height) {\n    const calculated = getDimensionsAndAspectRatio(imgDimensions, {\n      width,\n      height,\n      fit,\n    })\n    width = calculated.width\n    height = calculated.height\n    aspectRatio = calculated.aspectRatio\n  }\n\n  // Case 1: width of height were passed in, make sure it isn't larger than the actual image\n  width = width && Math.min(width, imgDimensions.width)\n  height = height && Math.min(height, imgDimensions.height)\n\n  // Case 2: neither width or height were passed in, use default size\n  if (!width && !height) {\n    width = Math.min(DEFAULT_FLUID_WIDTH, imgDimensions.width)\n    height = width / aspectRatio\n  }\n\n  // if it still hasn't been found, calculate width from the derived height.\n  // TS isn't smart enough to realise the type for height has been narrowed here\n  if (!width) {\n    width = (height as number) * aspectRatio\n  }\n\n  const originalWidth = width\n  const isTopSizeOverriden =\n    imgDimensions.width < width || imgDimensions.height < (height as number)\n  if (isTopSizeOverriden) {\n    width = imgDimensions.width\n    height = imgDimensions.height\n  }\n\n  width = Math.round(width)\n\n  if (breakpoints?.length > 0) {\n    sizes = breakpoints.filter(size => size <= imgDimensions.width)\n\n    // If a larger breakpoint has been filtered-out, add the actual image width instead\n    if (\n      sizes.length < breakpoints.length &&\n      !sizes.includes(imgDimensions.width)\n    ) {\n      sizes.push(imgDimensions.width)\n    }\n  } else {\n    sizes = densities.map(density => Math.round(density * (width as number)))\n    sizes = sizes.filter(size => size <= imgDimensions.width)\n  }\n\n  // ensure that the size passed in is included in the final output\n  if (layout === `constrained` && !sizes.includes(width)) {\n    sizes.push(width)\n  }\n  sizes = sizes.sort(sortNumeric)\n  return {\n    sizes,\n    aspectRatio,\n    presentationWidth: originalWidth,\n    presentationHeight: Math.round(originalWidth / aspectRatio),\n    unscaledWidth: width,\n  }\n}\n\nexport function getDimensionsAndAspectRatio(\n  dimensions,\n  options\n): { width: number; height: number; aspectRatio: number } {\n  // Calculate the eventual width/height of the image.\n  const imageAspectRatio = dimensions.width / dimensions.height\n\n  let width = options.width\n  let height = options.height\n\n  switch (options.fit) {\n    case `fill`: {\n      width = options.width ? options.width : dimensions.width\n      height = options.height ? options.height : dimensions.height\n      break\n    }\n    case `inside`: {\n      const widthOption = options.width\n        ? options.width\n        : Number.MAX_SAFE_INTEGER\n      const heightOption = options.height\n        ? options.height\n        : Number.MAX_SAFE_INTEGER\n\n      width = Math.min(widthOption, Math.round(heightOption * imageAspectRatio))\n      height = Math.min(\n        heightOption,\n        Math.round(widthOption / imageAspectRatio)\n      )\n      break\n    }\n    case `outside`: {\n      const widthOption = options.width ? options.width : 0\n      const heightOption = options.height ? options.height : 0\n\n      width = Math.max(widthOption, Math.round(heightOption * imageAspectRatio))\n      height = Math.max(\n        heightOption,\n        Math.round(widthOption / imageAspectRatio)\n      )\n      break\n    }\n\n    default: {\n      if (options.width && !options.height) {\n        width = options.width\n        height = Math.round(options.width / imageAspectRatio)\n      }\n\n      if (options.height && !options.width) {\n        width = Math.round(options.height * imageAspectRatio)\n        height = options.height\n      }\n    }\n  }\n\n  return {\n    width,\n    height,\n    aspectRatio: width / height,\n  }\n}\n","/* global GATSBY___IMAGE */\nimport { generateImageData, EVERY_BREAKPOINT } from \"../image-utils\"\nimport type { CSSProperties, HTMLAttributes, ImgHTMLAttributes } from \"react\"\nimport type { Node } from \"gatsby\"\nimport type { PlaceholderProps } from \"./placeholder\"\nimport type { MainImageProps } from \"./main-image\"\nimport type { IGatsbyImageData } from \"./gatsby-image.browser\"\nimport type {\n  IGatsbyImageHelperArgs,\n  Layout,\n  IImage,\n  ImageFormat,\n} from \"../image-utils\"\n\n// Native lazy-loading support: https://addyosmani.com/blog/lazy-loading/\nexport const hasNativeLazyLoadSupport = (): boolean =>\n  typeof HTMLImageElement !== `undefined` &&\n  `loading` in HTMLImageElement.prototype\n\nexport function gatsbyImageIsInstalled(): boolean {\n  return typeof GATSBY___IMAGE !== `undefined` && GATSBY___IMAGE\n}\n\nexport type IGatsbyImageDataParent<T = never> = T & {\n  gatsbyImageData: IGatsbyImageData\n}\nexport type IGatsbyImageParent<T = never> = T & {\n  gatsbyImage: IGatsbyImageData\n}\nexport type FileNode = Partial<Node> & {\n  childImageSharp?: IGatsbyImageDataParent<Partial<Node>>\n}\n\nconst isGatsbyImageData = (\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  node: IGatsbyImageData | any\n): node is IGatsbyImageData =>\n  // 🦆 check for a deep prop to be sure this is a valid gatsbyImageData object\n  Boolean(node?.images?.fallback?.src)\n\nconst isGatsbyImageDataParent = <T>(\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  node: IGatsbyImageDataParent<T> | any\n): node is IGatsbyImageDataParent<T> => Boolean(node?.gatsbyImageData)\n\nconst isGatsbyImageParent = <T>(\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  node: IGatsbyImageParent<T> | any\n): node is IGatsbyImageParent<T> => Boolean(node?.gatsbyImage)\n\nexport type ImageDataLike =\n  | FileNode\n  | IGatsbyImageDataParent\n  | IGatsbyImageParent\n  | IGatsbyImageData\n\nexport const getImage = (\n  node: ImageDataLike | null\n): IGatsbyImageData | undefined => {\n  // This checks both for gatsbyImageData and gatsbyImage\n  if (isGatsbyImageData(node)) {\n    return node\n  }\n  // gatsbyImageData GraphQL field\n  if (isGatsbyImageDataParent(node)) {\n    return node.gatsbyImageData\n  }\n  // gatsbyImage GraphQL field for Gatsby's Image CDN service\n  if (isGatsbyImageParent(node)) {\n    return node.gatsbyImage\n  }\n  return node?.childImageSharp?.gatsbyImageData\n}\n\nexport const getSrc = (node: ImageDataLike): string | undefined =>\n  getImage(node)?.images?.fallback?.src\n\nexport const getSrcSet = (node: ImageDataLike): string | undefined =>\n  getImage(node)?.images?.fallback?.srcSet\n\nexport function getWrapperProps(\n  width: number,\n  height: number,\n  layout: Layout\n): Pick<HTMLAttributes<HTMLElement>, \"className\" | \"style\"> & {\n  \"data-gatsby-image-wrapper\": string\n} {\n  const wrapperStyle: CSSProperties = {}\n\n  let className = `gatsby-image-wrapper`\n\n  // If the plugin isn't installed we need to apply the styles inline\n  if (!gatsbyImageIsInstalled()) {\n    wrapperStyle.position = `relative`\n    wrapperStyle.overflow = `hidden`\n  }\n\n  if (layout === `fixed`) {\n    wrapperStyle.width = width\n    wrapperStyle.height = height\n  } else if (layout === `constrained`) {\n    if (!gatsbyImageIsInstalled()) {\n      wrapperStyle.display = `inline-block`\n      wrapperStyle.verticalAlign = `top`\n    }\n    className = `gatsby-image-wrapper gatsby-image-wrapper-constrained`\n  }\n\n  return {\n    className,\n    \"data-gatsby-image-wrapper\": ``,\n    style: wrapperStyle,\n  }\n}\n\nexport interface IUrlBuilderArgs<OptionsType> {\n  width: number\n  height: number\n  baseUrl: string\n  format: ImageFormat\n  options: OptionsType\n}\nexport interface IGetImageDataArgs<OptionsType = Record<string, unknown>> {\n  baseUrl: string\n  /**\n   * For constrained and fixed images, the size of the image element\n   */\n  width?: number\n  height?: number\n  /**\n   * If available, pass the source image width and height\n   */\n  sourceWidth?: number\n  sourceHeight?: number\n  /**\n   * If only one dimension is passed, then this will be used to calculate the other.\n   */\n  aspectRatio?: number\n  layout?: Layout\n  /**\n   * Returns a URL based on the passed arguments. Should be a pure function\n   */\n  urlBuilder: (args: IUrlBuilderArgs<OptionsType>) => string\n\n  /**\n   * Should be a data URI\n   */\n  placeholderURL?: string\n  backgroundColor?: string\n  /**\n   * Used in error messages etc\n   */\n  pluginName?: string\n\n  /**\n   * If you do not support auto-format, pass an array of image types here\n   */\n  formats?: Array<ImageFormat>\n\n  breakpoints?: Array<number>\n\n  /**\n   * Passed to the urlBuilder function\n   */\n  options?: OptionsType\n}\n\n/**\n * Use this hook to generate gatsby-plugin-image data in the browser.\n */\nexport function getImageData<OptionsType>({\n  baseUrl,\n  urlBuilder,\n  sourceWidth,\n  sourceHeight,\n  pluginName = `getImageData`,\n  formats = [`auto`],\n  breakpoints,\n  options,\n  ...props\n}: IGetImageDataArgs<OptionsType>): IGatsbyImageData {\n  if (\n    !breakpoints?.length &&\n    (props.layout === `fullWidth` || (props.layout as string) === `FULL_WIDTH`)\n  ) {\n    breakpoints = EVERY_BREAKPOINT\n  }\n  const generateImageSource = (\n    baseUrl: string,\n    width: number,\n    height?: number,\n    format?: ImageFormat\n  ): IImage => {\n    return {\n      width,\n      height,\n      format,\n      src: urlBuilder({ baseUrl, width, height, options, format }),\n    }\n  }\n\n  const sourceMetadata: IGatsbyImageHelperArgs[\"sourceMetadata\"] = {\n    width: sourceWidth,\n    height: sourceHeight,\n    format: `auto`,\n  }\n\n  const args: IGatsbyImageHelperArgs = {\n    ...props,\n    pluginName,\n    generateImageSource,\n    filename: baseUrl,\n    formats,\n    breakpoints,\n    sourceMetadata,\n  }\n  return generateImageData(args)\n}\n\nexport function getMainProps(\n  isLoading: boolean,\n  isLoaded: boolean,\n  images: IGatsbyImageData[\"images\"],\n  loading?: \"eager\" | \"lazy\",\n  style: CSSProperties = {}\n): Partial<MainImageProps> {\n  // fallback when it's not configured in gatsby-config.\n  if (!gatsbyImageIsInstalled()) {\n    style = {\n      height: `100%`,\n      left: 0,\n      position: `absolute`,\n      top: 0,\n      transform: `translateZ(0)`,\n      transition: `opacity 250ms linear`,\n      width: `100%`,\n      willChange: `opacity`,\n      ...style,\n    }\n  }\n\n  const result = {\n    ...images,\n    loading,\n    shouldLoad: isLoading,\n    \"data-main-image\": ``,\n    style: {\n      ...style,\n      opacity: isLoaded ? 1 : 0,\n    },\n  }\n\n  return result\n}\n\nexport type PlaceholderImageAttrs = ImgHTMLAttributes<HTMLImageElement> &\n  Pick<PlaceholderProps, \"sources\" | \"fallback\"> & {\n    \"data-placeholder-image\"?: string\n  }\n\nexport function getPlaceholderProps(\n  placeholder: PlaceholderImageAttrs | undefined,\n  isLoaded: boolean,\n  layout: Layout,\n  width?: number,\n  height?: number,\n  backgroundColor?: string,\n  objectFit?: CSSProperties[\"objectFit\"],\n  objectPosition?: CSSProperties[\"objectPosition\"]\n): PlaceholderImageAttrs {\n  const wrapperStyle: CSSProperties = {}\n\n  if (backgroundColor) {\n    wrapperStyle.backgroundColor = backgroundColor\n\n    if (layout === `fixed`) {\n      wrapperStyle.width = width\n      wrapperStyle.height = height\n      wrapperStyle.backgroundColor = backgroundColor\n      wrapperStyle.position = `relative`\n    } else if (layout === `constrained`) {\n      wrapperStyle.position = `absolute`\n      wrapperStyle.top = 0\n      wrapperStyle.left = 0\n      wrapperStyle.bottom = 0\n      wrapperStyle.right = 0\n    } else if (layout === `fullWidth`) {\n      wrapperStyle.position = `absolute`\n      wrapperStyle.top = 0\n      wrapperStyle.left = 0\n      wrapperStyle.bottom = 0\n      wrapperStyle.right = 0\n    }\n  }\n\n  if (objectFit) {\n    wrapperStyle.objectFit = objectFit\n  }\n\n  if (objectPosition) {\n    wrapperStyle.objectPosition = objectPosition\n  }\n  const result: PlaceholderImageAttrs = {\n    ...placeholder,\n    \"aria-hidden\": true,\n    \"data-placeholder-image\": ``,\n    style: {\n      opacity: isLoaded ? 0 : 1,\n      transition: `opacity 500ms linear`,\n      ...wrapperStyle,\n    },\n  }\n\n  // fallback when it's not configured in gatsby-config.\n  if (!gatsbyImageIsInstalled()) {\n    result.style = {\n      height: `100%`,\n      left: 0,\n      position: `absolute`,\n      top: 0,\n      width: `100%`,\n    }\n  }\n\n  return result\n}\n\nexport interface IArtDirectedImage {\n  media: string\n  image: IGatsbyImageData\n}\n\n/**\n * Generate a Gatsby image data object with multiple, art-directed images that display at different\n * resolutions.\n *\n * @param defaultImage The image displayed when no media query matches.\n * It is also used for all other settings applied to the image, such as width, height and layout.\n * You should pass a className to the component with media queries to adjust the size of the container,\n * as this cannot be adjusted automatically.\n * @param artDirected Array of objects which each contains a `media` string which is a media query\n * such as `(min-width: 320px)`, and the image object to use when that query matches.\n */\nexport function withArtDirection(\n  defaultImage: IGatsbyImageData,\n  artDirected: Array<IArtDirectedImage>\n): IGatsbyImageData {\n  const { images, placeholder, ...props } = defaultImage\n  const output: IGatsbyImageData = {\n    ...props,\n    images: {\n      ...images,\n      sources: [],\n    },\n    placeholder: placeholder && {\n      ...placeholder,\n      sources: [],\n    },\n  }\n\n  artDirected.forEach(({ media, image }) => {\n    if (!media) {\n      if (process.env.NODE_ENV === `development`) {\n        console.warn(\n          \"[gatsby-plugin-image] All art-directed images passed to must have a value set for `media`. Skipping.\"\n        )\n      }\n      return\n    }\n\n    if (\n      image.layout !== defaultImage.layout &&\n      process.env.NODE_ENV === `development`\n    ) {\n      console.warn(\n        `[gatsby-plugin-image] Mismatched image layout: expected \"${defaultImage.layout}\" but received \"${image.layout}\". All art-directed images use the same layout as the default image`\n      )\n    }\n\n    output.images.sources.push(\n      ...image.images.sources.map(source => {\n        return { ...source, media }\n      }),\n      {\n        media,\n        srcSet: image.images.fallback.srcSet,\n      }\n    )\n\n    if (!output.placeholder) {\n      return\n    }\n\n    output.placeholder.sources.push({\n      media,\n      srcSet: image.placeholder.fallback,\n    })\n  })\n  output.images.sources.push(...images.sources)\n  if (placeholder?.sources) {\n    output.placeholder?.sources.push(...placeholder.sources)\n  }\n  return output\n}\n","import React, { FunctionComponent, ImgHTMLAttributes } from \"react\"\nimport * as PropTypes from \"prop-types\"\n\nexport interface IResponsiveImageProps {\n  sizes?: string\n  srcSet: string\n}\n\nexport type SourceProps = IResponsiveImageProps &\n  (\n    | {\n        media: string\n        type?: string\n      }\n    | {\n        media?: string\n        type: string\n      }\n  )\n\ntype FallbackProps = { src: string } & Partial<IResponsiveImageProps>\n\ntype ImageProps = ImgHTMLAttributes<HTMLImageElement> & {\n  src: string\n  alt: string\n  shouldLoad: boolean\n}\n\nexport type PictureProps = ImgHTMLAttributes<HTMLImageElement> & {\n  fallback?: FallbackProps\n  sources?: Array<SourceProps>\n  alt: string\n  shouldLoad?: boolean\n}\n\nconst Image: FunctionComponent<ImageProps> = function Image({\n  src,\n  srcSet,\n  loading,\n  alt = ``,\n  shouldLoad,\n  ...props\n}) {\n  return (\n    <img\n      {...props}\n      decoding=\"async\"\n      loading={loading}\n      src={shouldLoad ? src : undefined}\n      data-src={!shouldLoad ? src : undefined}\n      srcSet={shouldLoad ? srcSet : undefined}\n      data-srcset={!shouldLoad ? srcSet : undefined}\n      alt={alt}\n    />\n  )\n}\n\nexport const Picture: React.FC<PictureProps> = function Picture({\n  fallback,\n  sources = [],\n  shouldLoad = true,\n  ...props\n}) {\n  const sizes = props.sizes || fallback?.sizes\n  const fallbackImage = (\n    <Image {...props} {...fallback} sizes={sizes} shouldLoad={shouldLoad} />\n  )\n\n  if (!sources.length) {\n    return fallbackImage\n  }\n\n  return (\n    <picture>\n      {sources.map(({ media, srcSet, type }) => (\n        <source\n          key={`${media}-${type}-${srcSet}`}\n          type={type}\n          media={media}\n          srcSet={shouldLoad ? srcSet : undefined}\n          data-srcset={!shouldLoad ? srcSet : undefined}\n          sizes={sizes}\n        />\n      ))}\n      {fallbackImage}\n    </picture>\n  )\n}\n\nImage.propTypes = {\n  src: PropTypes.string.isRequired,\n  alt: PropTypes.string.isRequired,\n  sizes: PropTypes.string,\n  srcSet: PropTypes.string,\n  shouldLoad: PropTypes.bool,\n}\n\nPicture.displayName = `Picture`\nPicture.propTypes = {\n  alt: PropTypes.string.isRequired,\n  shouldLoad: PropTypes.bool,\n  fallback: PropTypes.exact({\n    src: PropTypes.string.isRequired,\n    srcSet: PropTypes.string,\n    sizes: PropTypes.string,\n  }),\n  sources: PropTypes.arrayOf(\n    PropTypes.oneOfType([\n      PropTypes.exact({\n        media: PropTypes.string.isRequired,\n        type: PropTypes.string,\n        sizes: PropTypes.string,\n        srcSet: PropTypes.string.isRequired,\n      }),\n      PropTypes.exact({\n        media: PropTypes.string,\n        type: PropTypes.string.isRequired,\n        sizes: PropTypes.string,\n        srcSet: PropTypes.string.isRequired,\n      }),\n    ])\n  ),\n}\n","import React, { FunctionComponent, ImgHTMLAttributes } from \"react\"\nimport * as PropTypes from \"prop-types\"\nimport { Picture, SourceProps } from \"./picture\"\n\nexport type PlaceholderProps = ImgHTMLAttributes<HTMLImageElement> & {\n  fallback?: string\n  sources?: Array<SourceProps>\n}\n\nexport const Placeholder: FunctionComponent<PlaceholderProps> =\n  function Placeholder({ fallback, ...props }) {\n    if (fallback) {\n      return (\n        <Picture\n          {...props}\n          fallback={{\n            src: fallback,\n          }}\n          aria-hidden\n          alt=\"\"\n        />\n      )\n    } else {\n      return <div {...props}></div>\n    }\n  }\n\nPlaceholder.displayName = `Placeholder`\nPlaceholder.propTypes = {\n  fallback: PropTypes.string,\n  sources: Picture.propTypes?.sources,\n  alt: function (props, propName, componentName): Error | null {\n    if (!props[propName]) {\n      return null\n    }\n\n    return new Error(\n      `Invalid prop \\`${propName}\\` supplied to \\`${componentName}\\`. Validation failed.`\n    )\n  },\n}\n","import React from \"react\"\nimport { Picture, PictureProps } from \"./picture\"\n\nexport type MainImageProps = PictureProps\n\nexport const MainImage: React.FC<PictureProps> = function MainImage(props) {\n  return (\n    <>\n      <Picture {...props} />\n      <noscript>\n        <Picture {...props} shouldLoad={true} />\n      </noscript>\n    </>\n  )\n}\n\nMainImage.displayName = `MainImage`\nMainImage.propTypes = Picture.propTypes\n","import React, { Fragment, FunctionComponent } from \"react\"\nimport terserMacro from \"../../macros/terser.macro\"\nimport { Layout } from \"../image-utils\"\n\nexport interface ILayoutWrapperProps {\n  layout: Layout\n  width: number\n  height: number\n}\n\nconst NativeScriptLoading: FunctionComponent = () => (\n  <script\n    type=\"module\"\n    dangerouslySetInnerHTML={{\n      __html: terserMacro`\nconst hasNativeLazyLoadSupport = typeof HTMLImageElement !== \"undefined\" && \"loading\" in HTMLImageElement.prototype;\nif (hasNativeLazyLoadSupport) {\n  const gatsbyImages = document.querySelectorAll('img[data-main-image]');\n  for (let mainImage of gatsbyImages) {\n    if (mainImage.dataset.src) {\n      mainImage.setAttribute('src', mainImage.dataset.src)\n      mainImage.removeAttribute('data-src')\n    }\n    if (mainImage.dataset.srcset) {\n      mainImage.setAttribute('srcset', mainImage.dataset.srcset)\n      mainImage.removeAttribute('data-srcset')\n    }\n\n    const sources = mainImage.parentNode.querySelectorAll('source[data-srcset]');\n    for (let source of sources) {\n      source.setAttribute('srcset', source.dataset.srcset)\n      source.removeAttribute('data-srcset')\n    }\n\n    if (mainImage.complete) {\n      mainImage.style.opacity = 1;\n\n      // also hide the placeholder\n      mainImage.parentNode.parentNode.querySelector('[data-placeholder-image]').style.opacity = 0;\n    }\n  }\n}\n`,\n    }}\n  />\n)\n\nexport function getSizer(\n  layout: Layout,\n  width: number,\n  height: number\n): string {\n  let sizer = ``\n  if (layout === `fullWidth`) {\n    sizer = `<div aria-hidden=\"true\" style=\"padding-top: ${\n      (height / width) * 100\n    }%;\"></div>`\n  }\n\n  if (layout === `constrained`) {\n    sizer = `<div style=\"max-width: ${width}px; display: block;\"><img alt=\"\" role=\"presentation\" aria-hidden=\"true\" src=\"data:image/svg+xml;charset=utf-8,%3Csvg height='${height}' width='${width}' xmlns='http://www.w3.org/2000/svg' version='1.1'%3E%3C/svg%3E\" style=\"max-width: 100%; display: block; position: static;\"></div>`\n  }\n\n  return sizer\n}\n\nconst Sizer: FunctionComponent<ILayoutWrapperProps> = function Sizer({\n  layout,\n  width,\n  height,\n}) {\n  if (layout === `fullWidth`) {\n    return (\n      <div aria-hidden style={{ paddingTop: `${(height / width) * 100}%` }} />\n    )\n  }\n\n  if (layout === `constrained`) {\n    return (\n      <div style={{ maxWidth: width, display: `block` }}>\n        <img\n          alt=\"\"\n          role=\"presentation\"\n          aria-hidden=\"true\"\n          src={`data:image/svg+xml;charset=utf-8,%3Csvg height='${height}' width='${width}' xmlns='http://www.w3.org/2000/svg' version='1.1'%3E%3C/svg%3E`}\n          style={{\n            maxWidth: `100%`,\n            display: `block`,\n            position: `static`,\n          }}\n        />\n      </div>\n    )\n  }\n\n  return null\n}\n\nexport const LayoutWrapper: FunctionComponent<ILayoutWrapperProps> =\n  function LayoutWrapper({ children, ...props }) {\n    return (\n      <Fragment>\n        <Sizer {...props} />\n        {children}\n\n        {SERVER ? <NativeScriptLoading /> : null}\n      </Fragment>\n    )\n  }\n","import React from \"react\"\nimport { getWrapperProps, getMainProps, getPlaceholderProps } from \"./hooks\"\nimport { Placeholder } from \"./placeholder\"\nimport { MainImage, MainImageProps } from \"./main-image\"\nimport { LayoutWrapper } from \"./layout-wrapper\"\nimport PropTypes from \"prop-types\"\nimport type { FunctionComponent, WeakValidationMap } from \"react\"\nimport type { GatsbyImageProps, IGatsbyImageData } from \"./gatsby-image.browser\"\n\nconst removeNewLines = (str: string): string => str.replace(/\\n/g, ``)\n\nexport const GatsbyImage: FunctionComponent<GatsbyImageProps> =\n  function GatsbyImage({\n    as = `div`,\n    className,\n    class: preactClass,\n    style,\n    image,\n    loading = `lazy`,\n    imgClassName,\n    imgStyle,\n    backgroundColor,\n    objectFit,\n    objectPosition,\n    ...props\n  }) {\n    if (!image) {\n      console.warn(`[gatsby-plugin-image] Missing image prop`)\n      return null\n    }\n\n    if (preactClass) {\n      className = preactClass\n    }\n\n    imgStyle = {\n      objectFit,\n      objectPosition,\n      backgroundColor,\n      ...imgStyle,\n    }\n\n    const {\n      width,\n      height,\n      layout,\n      images,\n      placeholder,\n      backgroundColor: placeholderBackgroundColor,\n    } = image\n\n    const {\n      style: wStyle,\n      className: wClass,\n      ...wrapperProps\n    } = getWrapperProps(width, height, layout)\n\n    const cleanedImages: IGatsbyImageData[\"images\"] = {\n      fallback: undefined,\n      sources: [],\n    }\n    if (images.fallback) {\n      cleanedImages.fallback = {\n        ...images.fallback,\n        srcSet: images.fallback.srcSet\n          ? removeNewLines(images.fallback.srcSet)\n          : undefined,\n      }\n    }\n\n    if (images.sources) {\n      cleanedImages.sources = images.sources.map(source => {\n        return {\n          ...source,\n          srcSet: removeNewLines(source.srcSet),\n        }\n      })\n    }\n\n    return React.createElement(\n      as,\n      {\n        ...wrapperProps,\n        style: {\n          ...wStyle,\n          ...style,\n          backgroundColor,\n        },\n        className: `${wClass}${className ? ` ${className}` : ``}`,\n      },\n      <LayoutWrapper layout={layout} width={width} height={height}>\n        <Placeholder\n          {...getPlaceholderProps(\n            placeholder,\n            false,\n            layout,\n            width,\n            height,\n            placeholderBackgroundColor,\n            objectFit,\n            objectPosition\n          )}\n        />\n\n        <MainImage\n          data-gatsby-image-ssr=\"\"\n          className={imgClassName}\n          {...(props as Omit<\n            MainImageProps,\n            \"images\" | \"fallback\" | \"onError\" | \"onLoad\"\n          >)}\n          // When eager is set we want to start the isLoading state on true (we want to load the img without react)\n          {...getMainProps(\n            loading === `eager`,\n            false,\n            cleanedImages,\n            loading,\n            imgStyle\n          )}\n        />\n      </LayoutWrapper>\n    )\n  }\n\nexport const altValidator: PropTypes.Validator<string> = (\n  props: GatsbyImageProps,\n  propName,\n  componentName,\n  ...rest\n): Error | undefined => {\n  if (!props.alt && props.alt !== ``) {\n    return new Error(\n      `The \"alt\" prop is required in ${componentName}. If the image is purely presentational then pass an empty string: e.g. alt=\"\". Learn more: https://a11y-style-guide.com/style-guide/section-media.html`\n    )\n  }\n\n  return PropTypes.string(props, propName, componentName, ...rest)\n}\n\nexport const propTypes = {\n  image: PropTypes.object.isRequired,\n  alt: altValidator,\n} as WeakValidationMap<GatsbyImageProps>\n","import React, { FunctionComponent, ReactElement } from \"react\"\nimport {\n  altValidator,\n  GatsbyImage as GatsbyImageServer,\n} from \"./gatsby-image.server\"\nimport { GatsbyImageProps, IGatsbyImageData } from \"./gatsby-image.browser\"\nimport PropTypes from \"prop-types\"\nimport { ISharpGatsbyImageArgs } from \"../image-utils\"\n\nexport interface IStaticImageProps\n  extends Omit<GatsbyImageProps, \"image\">,\n    Omit<ISharpGatsbyImageArgs, \"backgroundColor\"> {\n  src: string\n}\n\n// These values are added by Babel. Do not add them manually\ninterface IPrivateProps {\n  __imageData?: IGatsbyImageData\n  __error?: string\n}\n\nexport function _getStaticImage(\n  GatsbyImage: FunctionComponent<GatsbyImageProps>\n): React.FC<IStaticImageProps & IPrivateProps> {\n  return function StaticImage({\n    src,\n    __imageData: imageData,\n    __error,\n    // We extract these because they're not meant to be passed-down to GatsbyImage\n    /* eslint-disable @typescript-eslint/no-unused-vars */\n    width,\n    height,\n    aspectRatio,\n    tracedSVGOptions,\n    placeholder,\n    formats,\n    quality,\n    transformOptions,\n    jpgOptions,\n    pngOptions,\n    webpOptions,\n    avifOptions,\n    blurredOptions,\n    breakpoints,\n    outputPixelDensities,\n    /* eslint-enable @typescript-eslint/no-unused-vars */\n    ...props\n  }): ReactElement {\n    if (__error) {\n      console.warn(__error)\n    }\n\n    if (imageData) {\n      return <GatsbyImage image={imageData} {...props} />\n    }\n    console.warn(`Image not loaded`, src)\n    if (!__error && process.env.NODE_ENV === `development`) {\n      console.warn(\n        `Please ensure that \"gatsby-plugin-image\" is included in the plugins array in gatsby-config.js, and that your version of gatsby is at least 2.24.78`\n      )\n    }\n    return null\n  }\n}\n\nconst StaticImage: React.FC<IStaticImageProps & IPrivateProps> =\n  _getStaticImage(GatsbyImageServer)\n\nconst checkDimensionProps: PropTypes.Validator<number> = (\n  props: IStaticImageProps & IPrivateProps,\n  propName: keyof IStaticImageProps & IPrivateProps,\n  ...rest\n) => {\n  if (\n    props.layout === `fullWidth` &&\n    (propName === `width` || propName === `height`) &&\n    props[propName]\n  ) {\n    return new Error(\n      `\"${propName}\" ${props[propName]} may not be passed when layout is fullWidth.`\n    )\n  }\n  return PropTypes.number(props, propName, ...rest)\n}\n\nconst validLayouts = new Set([`fixed`, `fullWidth`, `constrained`])\n\nexport const propTypes = {\n  src: PropTypes.string.isRequired,\n  alt: altValidator,\n  width: checkDimensionProps,\n  height: checkDimensionProps,\n  sizes: PropTypes.string,\n  layout: (props: IStaticImageProps & IPrivateProps): Error | undefined => {\n    if (props.layout === undefined) {\n      return undefined\n    }\n    if (validLayouts.has(props.layout)) {\n      return undefined\n    }\n\n    return new Error(\n      `Invalid value ${props.layout}\" provided for prop \"layout\". Defaulting to \"constrained\". Valid values are \"fixed\", \"fullWidth\" or \"constrained\".`\n    )\n  },\n}\n\nStaticImage.displayName = `StaticImage`\nStaticImage.propTypes = propTypes\n\nexport { StaticImage }\n","import React from 'react'\nimport { GatsbyImage, getImage } from \"gatsby-plugin-image\"\nimport { graphql } from \"gatsby\"\nimport styled from 'styled-components'\nimport ReactMarkdown from 'react-markdown'\n\nconst AboutPageStyles = styled.div`\n    h1 {\n        margin-bottom: .667em;\n    }\n    .gatsby-image-wrapper.avatar-image {\n        margin-bottom: 2em;\n        overflow: visible;\n        &:after, &:before {\n            content: '';\n            z-index: 2;\n            position: absolute;\n            display: block;\n            background: ${(props) => props.theme.accentColor};\n            height: 1em;\n        }\n        &:before {\n            width: 1em;\n            left: .5em;\n            top: -0.5em;\n        }\n        &:after {\n            width: 5em;\n            left: 6.25em;\n            bottom: -0.5em;\n        }\n        img {\n            background: ${(props) => props.theme.accentColor};\n            mix-blend-mode: hard-light;\n            filter: saturate(0.5);\n        }\n    }\n    .about-body {\n        h1 {\n            font-size: 1.75em;\n            line-height: 1.4;\n            margin-bottom: .3em;\n        }\n        strong {\n            color: ${(props) => props.theme.accentColor};\n        }\n    }\n`\n\nconst AboutPage = ({data}) => {\n    const aboutData = data.allStrapiAbout.nodes[0]\n    return (\n        <>\n            <AboutPageStyles className=\"container\">\n                <h1 className='page-header'>À propos</h1>\n                <GatsbyImage \n                    image={getImage(aboutData.about_avatar.localFile.childImageSharp.gatsbyImageData)}\n                    key={aboutData.about_avatar.localFile.id}\n                    alt='À propos de Romain Mosser'\n                    className=\"avatar-image\"\n                />\n                <ReactMarkdown className='about-body' children={aboutData.about_text.data.about_text}/>\n            </AboutPageStyles>\n        </>\n    )\n}\n\nexport const query = graphql`\n  query {\n    allStrapiAbout {\n      nodes {\n        about_avatar {\n        localFile {\n                childImageSharp {\n                    gatsbyImageData(height: 180, width: 164, quality: 100)\n                }\n            }\n        }\n        about_text {\n          data {\n            about_text\n          }\n        }\n        SEO {\n            title\n            description\n        }\n      }\n    }\n  }\n`\n\nexport const Head = ({ data }) => {\n    const seoData = data.allStrapiAbout.nodes[0].SEO\n    return (\n        <>\n            <title>{seoData.title}</title>\n            <meta name=\"description\" content={seoData.description} />\n        </>\n    )\n}\n\nexport default AboutPage\n"],"names":["message","warn","a","b","width","layout","images","map","src","image","join","filename","lastIndexOf","dot","slice","ext","length","args","height","sourceMetadata","breakpoints","aspectRatio","formats","toLowerCase","camelCase","Math","round","setDefaultDimensions","generateImageSource","format","fit","options","pluginName","reporter","backgroundColor","placeholderURL","formatFromFilename","size","has","add","calculateImageSizes","sources","sizes","getSizes","imageSizes","presentationWidth","forEach","imageSrc","filter","Boolean","find","unscaledWidth","unscaled","result","fallback","srcSet","getSrcSet","push","type","imageProps","placeholder","presentationHeight","values","from","sort","sortNumeric","imgDimensions","DEFAULT_BREAKPOINTS","Object","entries","_","erroneousUserDimensions","outputPixelDensities","DEFAULT_PIXEL_DENSITIES","dedupeAndSortDensities","getDimensionsAndAspectRatio","calculated","fixedDimension","densities","density","originalWidth","min","includes","dimensions","Number","MAX_SAFE_INTEGER","widthOption","heightOption","imageAspectRatio","max","GATSBY___IMAGE","node","gatsbyImageData","gatsbyImage","isGatsbyImageData","isGatsbyImageDataParent","isGatsbyImageParent","childImageSharp","getImage","gatsbyImageIsInstalled","wrapperStyle","position","overflow","display","verticalAlign","className","style","baseUrl","urlBuilder","sourceWidth","sourceHeight","props","EVERY_BREAKPOINT","isLoading","isLoaded","loading","left","top","transform","transition","willChange","shouldLoad","opacity","objectFit","objectPosition","bottom","right","defaultImage","artDirected","media","process","env","NODE_ENV","console","output","source","alt","decoding","undefined","React","Image","key","fallbackImage","propTypes","PropTypes","string","isRequired","bool","Picture","displayName","exact","arrayOf","oneOfType","Placeholder","propName","componentName","MainImage","dangerouslySetInnerHTML","__html","paddingTop","maxWidth","role","children","Fragment","Sizer","NativeScriptLoading","str","replace","as","preactClass","imgClassName","imgStyle","placeholderBackgroundColor","wStyle","wClass","wrapperProps","getWrapperProps","cleanedImages","removeNewLines","createElement","LayoutWrapper","getPlaceholderProps","getMainProps","GatsbyImage","__imageData","imageData","__error","_getStaticImage","GatsbyImageServer","number","checkDimensionProps","validLayouts","StaticImage","styled","ReactMarkdown","AboutPageStyles","div","theme","accentColor","AboutPage","data","aboutData","allStrapiAbout","nodes","about_avatar","localFile","id","about_text","query","Head","seoData","SEO","title","description"],"sourceRoot":""}